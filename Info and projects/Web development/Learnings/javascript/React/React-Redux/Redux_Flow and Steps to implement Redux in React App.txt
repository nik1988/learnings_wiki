
For Implemeting Redux in our App we must do below things:

As we know the flow for redux design pattern : 

we have 


	action -> reducer -> store -> react app -> render UI
	^___________dispatcher_________________|

FLow:


Action defines the action done by user
reducer modifies the state based on action, reducer contains the initial state of an app
dispatcher dispatches the action from component, we need to register dispatcher with our child component from container app : therfore flow is allways in one direction. 

		-- actions are allways trigered by dispatcher
		-- action is sent to reducer and reducer updates state based on action
		-- as soon as state is updated react detects it ans renders the UI

we create a store in index.js file by passing the root reducer and pass the state store to our container by using Provider provided by react.
we connect our container component to the state store and dispatcher using connect method provided by react app. 

connect method takes two arguments  : mapStateToProps and mapDispatchToProps

mapStateToProps: we need to define this method to map the state variable our container component needs to props, this method must return an object takes state as an argument.

mapDispatchToProps: In normal React flow we send a callback method to child component which updates our state variable, although in redux flow we send the dispatcher to our child component
wich dispatches the action to our action.js file and pass the appropriate content as expected by the action method.
It takes dispactch as an argument, dispatch is a method defined by react which dispatches the event to action when the method is executed from our child component.
	

Steps to be followed to create a redux pattern:


--------- We Need to Define Action-----------------------

Bsically we need to define a action by creating an action.js file where we specify the action as methos which allways returns an object and contains type of action and payload carried by that action

example in our robo friends we have a action where we modify our text field hence under action.js we specify our action as


	export const setSearchField = (text) => ({ 

						type:CHANGE_SEARCH_FIELD, // it is allways recommened to deine action as string constants in seprate constants file to avoid any typo errors.
						payload:text
	
				})



----------- We need to define reducers ----------------------


Initially we create a separate file reducer.js:


reducers contains a central state also known as initial state of an app and it contains a pure function which receives an interanl state and action , and based on the type of action it allways retunrs a new state object.

it is called pure function because  it will allways returns same of ourtput for same input.

reducer looks like as below:

	
			
	import {CHANGE_SEARCH_FIELD} from './constants.js';

	
	// Initial state of an app
		const initialState = {
			searchField:''

	}


// reducer method
// dispatcher provided by react redux method takes care of passsing state and action to reducer

export const searchRobots = (state = initialState, action = {}) => {

    switch(action.type){
	
	//currently we have only one action in real world app there are many actions.
    	case CHANGE_SEARCH_FIELD:
    		return Object.assign({},state,{searchField:action.payload}); // return a new state object using object.assign based on the type of action

    	default:   
    		return state;


    } 


}



------------------- we register our reducer method as a store in index.js and provide it to our containers (Intillegent Components) using provider ------------------------

under index.js file we will have

	const store = createStore(searchRobots); // cteateStore is provided by redux library

       	//provide the store to container components using provider

	
		<Provider store = {store}> // provider is imported from react-redux library

		<App />
		
		</Provider>




---------------- connect our container component to store -------------------------------------


now our container component needs to be connected to store , we use connect method to do the same in our container component as shown below:

App.js 


rather than writing export default App 

we will write

export default connect(mapStateToProps,mapDispatchToProps)(App); // connect method is provided by react-redux


connect method to received two method as arguments 

-- mapStateToProps: it provides the state as pproeprty to parent component
-- mapDispatchToProps: provides dispatcher as propert to parent componet


these methos needs to be defined before class App extends Component { as shown below


mapStateToProps = (state ) => { 

	return { searchField : this.state.searchField}  // return the current state (in this case we are concerned about the state of searchfield so we are receiving the same)
  
} 




mapDispactchToProps = (event) => {

	return { onSearchChange : dispatch(setSearchField(event.target.value))  }   note: setSearchField is an action defined in action.js file which expects a text value and sends text value as a payload
}




note: normally we send a call bak method to our dumb  components but now we are sending dispatch instead which will dispatch an action upon a event

note we can dispath multiple actions from mapDispactchToProps 

now we can read these value as props in our App component as shown below


	const {searchField,onSearchChange} = this.props; 

look at App.js file from robofriends for more clarity.









