 Java Script provides various selectors to manipulate DOM dynamically as generated by Html.

-- Various selectors provided by java script are:

getElementsByTagName

getElementsByClassName

getElementById


querySelector

querySelectorAll



--------------------  getElementsByTagName ------------------------------


getElementsByTagName returns list of all the tags as specified in argument present in an html doc 

 example:

	var test = document.getElementsByTagName("div");  // return type will be HtmlCollection , takes string value as an argument

 returns the list of all div present in current HTML.

we can iterate through the list as 
	
	for(tag of test){
		
		console.log(tag);
	}

note: we cannot use for each with a HtmlCollection.
note: notice the plural "Elements" in getElementsByTagName it signifies it returns a list of element not a single element.



------------------ getElementsByClassName --------------------------

Same as getElementsBytagName , returns the list of dom elements based on class name passed as an argument.


--------------- getElementById  --------------------------------

returns the single dom element based on passed id of an HTML dom element.

example:  document.getElementById("<< Id assigned to Html element >>"); 



---------------- querySelector ------------------------------

 -- querySelector is more flexible version of getElementById , it can take element id , class name or tag name as a string argument and returns the first occurence of dom element with the given name or id 
     returns null if no referencces are found.

-- id name should be prefixed by # , example document.querySelector("#testid"); // where testid is id provided to dom element , will return first occurrence of dom element which has id as testid, null otherwise

-- ' . ' should be prefixed for class name if we are looking for an element with class name , example document.querySelector(.test);

--  we can use simple we are looking for element with first occurence of tag document.querySelector("div"); // will return the reference of dom element of first occurence of div tag



we can use all the three combinations to form a complex query and refer a particular element.


 --------------- how can we say queyselector is more flexible than document.getElemet .. Selectors --------------------------

lets take a below html 


<div id = "test">
 <div id = "test1">
   <div class = "test-cotainer"> ... some html code </div>
</div>
</div>

suppose we want to access specific element is present inside div with id test and has class test-cotainer

with query selector we can write : 

var innerContainer = document.querySelector ("#test .test-container") 

with other selectors we have to write 

var innerContainer = document.getElementById("test").getElemetsByClassName("test-container)[0];"


as we can query selector is simpler to write when we have to get the specific element present under multiple levels.


we can use both the selectors in conjugation , querySelector is more cleaner variant.




--------------------------- syntax for getting elemets based on multiple properties to capture a specific element in html using query selector ------------------------------------------


suppose we have a element like : 

<input type = "color" id = test1 name = "color1" value = "#00ff00"> 

and we want to capture this element by name we dont haave such property in document.getElement memthods

although using querySelector we can do:

document.querySelector('input[name="color1"]'); // in query selectior we can design queries like this to pick up a specific element , here we wanted to check specific attribute inside an element we used [] to query it.

----------------- querySelectorAll -------------------------------------------------


querSelectorAll return the list of all elements matching the given query. 

Note: type of list returned is nodelist,nodelist is different from HtmlCollection returned by geElementsByClassName and getElementsByTagName as HtmlCollection is dynamic and nodeList is static.

dynamic in nature here means suppose we have got the list of elements for having same class and in later point of time we have added one more element with the same class, variable to which we have assigned the list
will automatially get updated with the new element

but in case of nodeList variable to continue to have the same list which was present at the time code was executed.



-------------- getAttribute and setAttribute --------------------------------------

we can get the attribute from the dom element using getAttribute and set is using setAttribute, for example if we have

<ul> <li random="23"> NoteBook </li>

we can the value of attribute using document.querySelector("li").getAttribute("random"); // will return 23

atrribute can be anything like width and height of image.

similarly we can set the attribute using: example

document.querySelector("li").setAttribute("random","1000");

we can also set and get the class of an element or any propert we want, although below is the more common way to do so.


---------------------- Setting the property for DOM elementts ------------------------------

After receiving the referece the dom elements we can modify or set there property dynamically:

example : document.querySelector("h1").style.background = "yellow";

rather than providing the style here we can also set the name of the class which contains the style example:

var h1 = document.querySelector("h1");
h1.className = "cool-title"; // where cool-title is the name of the class defined in css.


------------- Adding class to the classlist --------------

if our dom element has multiple classes we can add new class as a part of classlist, example

document.querySelector("li").classList -- will print all the css classes associated with li

document.querySelector("li").classList.add("cool-title"); // will add new class "cool-title" to li element

"classList.remove method will remove the class from class list.


---------- innerHTML ------------------------

innerHTML is used to change the underlying html code of an element, example

document.querySelector("h1") // will print <h1> Shopping List </h1>

now we can change this html code using innerHTML as  below :

document.querySelector("h1").innerHTML = "<strong> !!!! </strong>"

innerHTML can be dangerous as we can loose initial html for ever if not handeled properly.

 

-------------- accessing parentElement and children of an element ---------------------------

we can access parentElement by doing .parentElement to the dom reference returned

aslo we can do .children to access children
 


----------- caching selectors to variables ----------------------------

note: it is important to cache selectors to variables because every time we use document.getELement or document.querySelector browser has to traverse down the dom tree to fecth the element which will use up memory

there fore , it is better to store the referece in variable so that we dont have to execute selectors to reference the same dom element again and again.








