 Java Script provides various selectors to manipulate DOM dynamically as generated by Html.

-- Various selectors provided by java script are:

getElementsByTagName

getElementsByClassName

getElementById


querySelector

querySelectorAll



--------------------  getElementsByTagName ------------------------------


getElementsByTagName returns list of all the tags as specified in argument present in an html doc 

 example:

	var test = document.getElementsByTagName("div");  // return type will be HtmlCollection , takes string value as an argument

 returns the list of all div present in current HTML.

we can iterate through the list as 
	
	for(tag of test){
		
		console.log(tag);
	}

note: we cannot use for each with a HtmlCollection.
note: notice the plural "Elements" in getElementsByTagName it signifies it returns a list of element not a single element.



------------------ getElementsByClassName --------------------------

Same as getElementsBytagName , returns the list of dom elements based on class name passed as an argument.


--------------- getElementById  --------------------------------

returns the single dom element based on passed id of an HTML dom element.

example:  document.getElementById("<< Id assigned to Html element >>");



---------------- querySelector ------------------------------

 -- querySelector is more flexible version of getElementById , it can take element id , class name or tag name as a string argument and returns the first occurence of dom element with the given name or id 
     returns null if no referencces are found.

-- id name should be prefixed by # , example document.querySelector("#testid"); // where testid is id provided to dom element , will return first occurrence of dom element which has id as testid, null otherwise

-- ' . ' should be prefixed for class name if we are looking for an element with class name , example document.querySelector(.test);

--  we can use simple we are looking for element with first occurence of tag document.querySelector("div"); // will return the reference of dom element of first occurence of div tag



we can use all the three combinations to form a complex query and refer a particular element.


 --------------- how can we say queyselector is more flexible than document.getElemet .. Selectors --------------------------

lets take a below html 


<div id = "test">
 <div id = "test1">
   <div class = "test-cotainer"> ... some html code </div>
</div>
</div>

suppose we want to access specific element is present inside div with id test and has class test-cotainer

with query selector we can write : 

var innerContainer = document.querySelector ("#test .test-container") 

with other selectors we have to write 

var innerContainer = document.getElementById("test").getElemetsByClassName("test-container)[0];"


as we can query selector is simpler to write when we have to get the specific element present under multiple levels.


we can use both the selectors in conjugation , querySelector is more cleaner variant.


----------------- querySelectorAll -------------------------------------------------


querSelectorAll return the list of all elements matching the given query. 

Note: type of list returned is nodelist,nodelist is different from HtmlCollection returned by geElementsByClassName and getElementsByTagName as HtmlCollection is dynamic and nodeList is static.










